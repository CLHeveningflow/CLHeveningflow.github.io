<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[LLVM 1:Clang入门]]></title>
    <url>%2F2019%2F09%2F28%2FLLVM%201_Clang%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[#LLVM简介 LLVM项目是可重用(reusable)、模块化(modular)的编译器以及工具链技术(toolchain technologies)的集合。有人将其理解为“底层虚拟机(Low Level Virtual Machine)”的简称，但是官方原话为：“The name “LLVM” itself is not an acronym; it is the full name of the project.”意思是：LLVM不是首字母缩写，而是这整个项目的全名。 ##1.LLVM&amp;&amp;clang安装 官网安装教程在这里。这里简单介绍一下。 ###1.1Linux环境 ####1.1.1 安装前注意事项 由于本人使用的是虚拟机，所以在创建虚拟机的时候需要分配较大的内存和磁盘空间。这里踩了很多坑。 ####1.1.2 下载有关库 sudo apt-get install cmake sudo apt-get install git sudo apt-get install gcc sudo apt-get install g++####1.1.3 下载项目源码 可以选择直接git整个工程，也可以去官网下载源码然后自行安装。这里就按官网的git方法。 git clone https://github.com/llvm/llvm-project.git下载好后会在当前目录下看到llvm-project文件夹。 ####1.1.4 构建项目 cd llvm-project创建构建目录 mkdir build cd build利用cmake构建 cmale -G &lt;generator&gt; [options] ../llvm常用的generator有： Ninja ——生成Ninja 文件 Unix Makefiles ——生成兼容make的makefile文件 Visual Studio ——生成Visual Studio项目与解决方案 Xcode ——用于生成Xcode项目 个人使用Unix Makefiles 常用的options有： DCMAKE_INSTALL_PREFIX=directory ——为目录指定要在其中安装LLVM工具和库的完整路径名（默认/usr/local）。 DCMAKE_BUILD_TYPE=type ——type选项有Debug，Release，RelWithDebInfo和MinSizeRel。默认值为Debug。 DLLVM_ENABLE_ASSERTIONS=On ——启用断言检查进行编译。 DLLVM_ENABLE_PROJECTS=”…” ——要另外构建的LLVM子项目的列表，以’;’分隔。例如要构建LLVM，Clang，libcxx和libcxxabi，使用: DLLVM_INSTALL_PROJECTS=&quot;clang;libcxx;libcxxabi&quot; DLLVM_TARGETS_TO_BUILD=”…” ——构建针对的平台的部分项目，以’;’分隔。默认面向所有平台编译(all)，指定只编译自己需要的CPU架构可以节省时间。 官方文档在这。 由于全部构建真的很耗费资源和时间，我使用的构建clang命令（可供参考）： cmake -DCMAKE_BUILD_TYPE=Release -DLLVM_TARGETS_TO_BUILD=&quot;X86&quot; -DLLVM_ENABLE_PROJECTS=clang -DLLVM_USE_LINKER=gold -G &quot;Unix Makefiles&quot; ../llvm当然你如果愿意（而且设备跑得动）也可以： cmake -G &quot;Unix Makefiles&quot; ../llvm####1.1.5 编译 make [-j &lt;core&gt;] sudo make install直接make也可以，但LLVM也支持并行编译，其中core取决于核心数。如： make -j 4这两步一般会很久…… ####1.1.6 测试 clang -v得到结果如下： clang version 10.0.0 Target: x86_64-unknown-linux-gnu Thread model: posix InstalledDir: /usr/local/bin Found candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/7 Found candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/7.4.0 Found candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/8 Selected GCC installation: /usr/lib/gcc/x86_64-linux-gnu/7.4.0 Candidate multilib: .;@m64 Selected multilib: .;@m64 编写一段C语言代码试试看(C++也可以): #include &lt;stdio.h&gt; int main() { printf(&quot;hello world\n&quot;); return 0; }用clang编译： clang helloworld.c -o hello.out ./hello.out如果是C++代码则： clang++ helloworld.cpp -o hello.out ./hello.out 大功告成！]]></content>
      <tags>
        <tag>LLVM</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F09%2F26%2Fhello%2Cworld%2F</url>
    <content type="text"><![CDATA[Hello world###这个世界你好 ###我是Eveningflow，很高兴认识你。]]></content>
  </entry>
</search>
